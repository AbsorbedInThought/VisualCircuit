{
  "version": "1.0",
  "package": {
    "name": "FaceDetector",
    "version": "1.0.0",
    "description": "Detects Faces in an Image.",
    "author": "Muhammad Taha Suhail",
    "image": "%3Csvg%20height=%22512%22%20viewBox=%220%200%2024%2024%22%20width=%22512%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cpath%20d=%22M12%2013c2.757%200%205-2.243%205-5s-2.243-5-5-5-5%202.243-5%205%202.243%205%205%205zM16.5%2015h-9a4.756%204.756%200%200%200-4.75%204.75v3.5c0%20.414.336.75.75.75h17a.75.75%200%200%200%20.75-.75v-3.5A4.756%204.756%200%200%200%2016.5%2015z%22%20fill=%22#607d8b%22/%3E%3Cpath%20d=%22M12%203C9.243%203%207%205.243%207%208s2.243%205%205%205zM12%2015H7.5a4.756%204.756%200%200%200-4.75%204.75v3.5c0%20.414.336.75.75.75H12z%22%20fill=%22#546d79%22/%3E%3Cpath%20d=%22M3%205.75a1%201%200%200%201-1-1V3c0-1.654%201.346-3%203-3h1.5a1%201%200%201%201%200%202H5c-.551%200-1%20.448-1%201v1.75a1%201%200%200%201-1%201zM6.5%2014H5c-1.654%200-3-1.346-3-3V9.25a1%201%200%201%201%202%200V11c0%20.552.449%201%201%201h1.5a1%201%200%201%201%200%202z%22%20fill=%22#00bcd4%22/%3E%3Cpath%20d=%22M4.75.01A3.005%203.005%200%200%200%202%203v1.75a1%201%200%201%200%202%200V3c0-.465.319-.857.75-.968zM3%208.25a1%201%200%200%200-1%201V11a3.005%203.005%200%200%200%202.75%202.99v-2.021A1.003%201.003%200%200%201%204%2011V9.25a1%201%200%200%200-1-1z%22%20fill=%22#00a4b9%22/%3E%3Cpath%20d=%22M21%205.75a1%201%200%200%201-1-1V3c0-.552-.449-1-1-1h-1.5a1%201%200%201%201%200-2H19c1.654%200%203%201.346%203%203v1.75a1%201%200%200%201-1%201zM19%2014h-1.5a1%201%200%201%201%200-2H19c.551%200%201-.448%201-1V9.25a1%201%200%201%201%202%200V11c0%201.654-1.346%203-3%203z%22%20fill=%22#00bcd4%22/%3E%3Cg%20fill=%22#00a4b9%22%3E%3Cpath%20d=%22M19%200h-1.5a1%201%200%201%200%200%202H19c.086%200%20.17.011.25.032V.01A2.95%202.95%200%200%200%2019%200zM19.25%2011.968A.985.985%200%200%201%2019%2012h-1.5a1%201%200%201%200%200%202H19c.084%200%20.168-.003.25-.01z%22/%3E%3C/g%3E%3C/svg%3E"
  },
  "design": {
    "board": "Python3-Noetic",
    "graph": {
      "blocks": [

        {
          "id": "100",
          "type": "basic.input",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 64,
            "y": 144
          }
        },

        {
          "id": "200",
          "type": "basic.output",
          "data": {
            "name": "",
            "pins": [
              {
                "index": "0",
                "name": "",
                "value": "0"
              }
            ],
            "virtual": true
          },
          "position": {
            "x": 752,
            "y": 144
          }
        },
        
       {
          "id": "300",
          "type": "basic.code",
          "data": {
            "code": "import cv2 as cv\nimport numpy as np\nfrom time import sleep\nfrom wires.wire_img import Wire_Read\n\ndef FaceDetector(input_wires, output_wires, parameters):\n\n    shm_r = Wire_Read(input_wires[0])    \n    choice = parameters[0]\n\n    classifier = cv.CascadeClassifier('backend/models/haarcascade_frontalface_default.xml')\n    \n    try:\n    \n        if choice == 'image':\n            \n            from wires.wire_img import Wire_Write\n            shm_w = Wire_Write(output_wires[0])\n\n            while True:\n\n                #sleep(0.02)\n                img = shm_r.get()\n                \n                bboxes = classifier.detectMultiScale(img)\n                \n                for box in bboxes:\n                    x, y, x1, y1 = box\n                    x1, y1 = x+x1, y+y1\n                    cv.rectangle(img, (x, y), (x1, y1), (0,255,0), 2)\n\n                shm_w.add(img)\n\n        else:\n        \n            from wires.wire_str import Wire_Write\n            shm_w = Wire_Write(output_wires[0])\n\n            while True:\n\n                sleep(0.02)\n                img = shm_r.get()\n                \n                bboxes = classifier.detectMultiScale(img)\n                \n                to_write = [320, 240, 0, 0]\n                for box in bboxes:\n                    to_write = [box[0], box[1], box[2], box[3]]\n                    break\n                    \n                to_write = np.array(to_write, dtype='<U6')\n                shm_w.add(to_write)\n                \n\n    except KeyboardInterrupt:\n        shm_r.release()\n        shm_w.release()",
            "params": [],
            "ports": {
              "out": [
                {
                  "name": "200"
                }
              ]
            }
          },
          "position": {
            "x": 248,
            "y": 88
          },
          "size": {
            "width": 384,
            "height": 256
          }
        },
        
        {
          "id": "400",
          "type": "basic.constant",
          "data": {
            "name": "box/image", 
            "value": "image",
            "local": true
          },
          "position": {
            "x": 378,
            "y": 10
          }
        }
        
      ],
      "wires": [
        {
          "source": {
            "block": "",
            "port": ""
          },
          "target": {
            "block": "200",
            "port": "out"
          }
        }
      ]
    }
  },
  "dependencies": {}
}
